<% layout('layouts/main')%>
<!DOCTYPE html>
<html>
<head>
    <title>MADPARK-Mapa</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.2/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />

    <style>
        #map { 
            width: 100%;
            height: 420px;
            box-shadow: 5px 5px 5px #888;
            margin-top: 200px; 
        }

        .filtro-container {
            position: absolute;
            top: 120px;
            left: 115px;
            z-index: 1000;
            background-color: #9db9cf;
            border-radius: 5px;
            padding: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            overflow: hidden;
            transition: max-height 0.3s ease-in-out;
        }

        .filtro-container.open {
            max-height: 600px; /* Ajusta la altura según sea necesario */
        }

        .filtro-container button {
            background-color: #284c61ef;
            color: #fff;
            border: none;
            padding: 15px 15px;
            border-radius: 3px;
            cursor: pointer;
        }

        .filtro-container button:hover {
            background-color: #87CEFA;
        }

        .search-button:hover {
            background-color: #d3a2d8;
        }

        #clearMarkers {
            position: absolute;
            top: 90px;
            right: 20px;
            z-index: 1000;
            background-color: #b4aeb4;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(99, 98, 98, 0.1);
        }

        #clearMarkers:hover {
            background-color: #d3a2d8;
        }

        .leaflet-control-geosearch {
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            border-radius: 4px;
        }

        .leaflet-control-geosearch input {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ccc;
            width: 250px;
        }

        .leaflet-control-geosearch button {
            background-color: #284c61ef;
            color: #fff;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
        }

        .leaflet-control-geosearch button:hover {
            background-color: #87CEFA;
        }

        #clearRouteButton {
            position: absolute;
            top: 580px; /* Ajusta la posición vertical según sea necesario */
            left: 130px;
            z-index: 1000;
            background-color: #284c61ef;
            color: #fff;
            border: none;
            padding: 8px 12px; /* Ajusta el tamaño del botón */
            border-radius: 3px;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        #clearRouteButton:hover {
            background-color: #87CEFA;
        }
    </style>
</head>
<body>

    <div id="map" class="map"></div>
    <button id="clearRouteButton" onclick="limpiarRuta()">Borrar Ruta</button>

    <!-- Leaflet JS CDN -->
    <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet-src.js"></script>
    <!-- esri Leaflet JS from CDN -->
    <script src="https://unpkg.com/esri-leaflet@2.0.8/dist/esri-leaflet-debug.js"></script>

    <!-- Leaflet Routing Machine JS -->
    <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
    <!-- Leaflet Control Geocoder JS -->
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <!-- esri Leaflet Control Geocoder JS -->
    <script src="https://unpkg.com/esri-leaflet-geocoder@2.2.4/dist/esri-leaflet-geocoder-debug.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/esri-leaflet-geocoder@2.2.4/dist/esri-leaflet-geocoder.css" />

    <script>
        var map = L.map('map').setView([40.416775, -3.70379], 11); // Centrar en Madrid

        L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://cloudmade.com">CloudMade</a>',
            maxZoom: 18
        }).addTo(map);

        var searchControl = L.esri.Geocoding.geosearch().addTo(map);
        var results = L.layerGroup().addTo(map);
    
        searchControl.on('results', function(data) {
            results.clearLayers();
            for (var i = data.results.length - 1; i >= 0; i--) {
                results.addLayer(L.marker(data.results[i].latlng));
            }
        });
    </script>
   
    <% if (isAuthenticated) { %>
        <script>
            var userCoordinates = null;
            navigator.geolocation.getCurrentPosition(function(position) {
                userCoordinates = [position.coords.latitude, position.coords.longitude];
                
                var userIcon = L.icon({
                    iconUrl: 'https://raw.githubusercontent.com/ChristiMerce/Madpark_PAGT/main/src/views/layouts/images/pingUsuario.png',
                    iconSize: [25, 25],
                    iconAnchor: [12, 25],
                    popupAnchor: [0, -25]
                });
                
                var userMarker = L.marker(userCoordinates, { icon: userIcon }).addTo(map);
                userMarker.bindPopup("Tu ubicación").openPopup();
            });
        </script>
    <% } else { %>
        <script>
            alert("Para ver su ubicación debe registrarse o iniciar sesión");
        </script>
    <% } %>
    <!----->
    <script>
        var parkingIcon = L.icon({
            iconUrl: 'images/aparcamiento.png',
            iconSize: [12, 12],
            iconAnchor: [12, 25],
            popupAnchor: [0, -25]
        });

        var selectedParkingIcon = L.icon({
            iconUrl: 'images/selectedParking.png', // Asegúrate de tener este icono en la ruta correcta
            iconSize: [25, 25],
            iconAnchor: [12, 25],
            popupAnchor: [0, -25]
        });
    </script>

<script>
    // Obtener los parkings desde el servidor
    fetch('/parkings')
    .then(response => response.json())
    .then(parkings => {
        parkings.forEach(parking => {
            // Verificar el campo TELEFONO
            const telefonoTexto = parking.TELEFONO && !isNaN(parking.TELEFONO) ? parking.TELEFONO : "No se dispone de telefono de contacto";

            const popupContent = `
                <h2>${parking.NOMBRE}</h2>
                <p>Distrito: ${parking.DISTRITO}</p>
                <p>Barrio: ${parking.BARRIO}</p>
                <p>Teléfono: ${telefonoTexto}</p>
                <button onclick="seleccionarParking('${parking._id}', '${parking.NOMBRE}')">Seleccionar Parking</button>
            `;
            
            const marker = L.marker([parking.LATITUD, parking.LONGITUD], { icon: parkingIcon }).addTo(map);
            marker.bindPopup(popupContent);

            marker.on('click', (e) => {
                if (userCoordinates) {
                    if (!routingControl) {
                        calculateRoute(userCoordinates, [e.latlng.lat, e.latlng.lng]);
                    } else {
                        routingControl.setWaypoints([
                            L.latLng(userCoordinates[0], userCoordinates[1]), // Ubicación del usuario
                            L.latLng(e.latlng.lat, e.latlng.lng) // Parking seleccionado
                        ]);
                    }
                } else {
                    alert("Ubicación del usuario no disponible");
                }
                // Cambiar el icono del parking seleccionado
                e.target.setIcon(selectedParkingIcon);
            });
            marker.addTo(map);
        });
    })
    .catch(error => console.error('Error al obtener los parkings:', error));

    const options = {
        draggable: true
    };

    // Función para seleccionar un parking
    function seleccionarParking(parkingId, parkingNombre) {
        fetch('/seleccionar-parking', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                parkingId: parkingId,
                parkingNombre: parkingNombre
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(`Parking ${parkingNombre} seleccionado exitosamente`);
            } else {
                alert('Error al seleccionar el parking');
            }
        })
        .catch(error => console.error('Error al seleccionar el parking:', error));
    }

    // Función para buscar datos de tráfico
    function buscarDatosTrafico(coordinates) {
        fetch('/traffics')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al obtener datos de tráfico');
                }
                return response.json();
            })
            .then(traffics => {
                traffics.forEach(traffic => {
                    // Convertir st_x y st_y a números para la comparación
                    const trafficX = parseFloat(traffic.st_x);
                    const trafficY = parseFloat(traffic.st_y);
                    
                    if (trafficX === coordinates[0] && trafficY === coordinates[1]) {
                        const popupContent = `
                            <p>${traffic.carga}</p>
                        `;
                        
                        // Crear un marcador en las coordenadas coincidentes y mostrar el popup
                        const marker = L.marker([trafficY, trafficX]).addTo(map);
                        marker.bindPopup(popupContent).openPopup();
                    }
                });
            })
            .catch(error => console.error('Error al obtener datos de tráfico:', error));
    }

    var routingControl;

    // Función para calcular la ruta
    function calculateRoute(start, end) {
        if (!start) {
            alert("Ubicación del usuario no disponible");
            return;
        }
    
        // Restablecer las coordenadas de la ruta existente si hay alguna
        limpiarRuta();
    
        // Calcular y mostrar la nueva ruta
        routingControl = L.Routing.control({
            waypoints: [
                L.latLng(start[0], start[1]), // Ubicación del usuario
                L.latLng(end[0], end[1]) // Parking seleccionado
            ],
            routeWhileDragging: true
        }).addTo(map);
        
        // Buscar datos de tráfico en el punto final
        buscarDatosTrafico(end);
    }

    // Función para limpiar la ruta
    function limpiarRuta() {
        console.log("Limpiando ruta...");
        if (routingControl) {
            console.log("routingControl existe, removiendo...");
            routingControl.removeFrom(map); // Usa removeFrom() para eliminar el control de enrutamiento
            routingControl = null; // Establece routingControl a null después de eliminarlo
            console.log("Ruta eliminada.");
        } else {
            console.log("No hay ruta que limpiar.");
        }
    }

    // Añadir evento al botón de borrar ruta para calcular la ruta nuevamente
    document.getElementById('clearRouteButton').addEventListener('click', () => {
        limpiarRuta();
        if (userCoordinates && selectedParkingLatLng) {
            calculateRoute(userCoordinates, selectedParkingLatLng);
        }
    });
</script>

    
    
    

</body>
</html>

