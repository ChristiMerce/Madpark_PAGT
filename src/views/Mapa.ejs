<%- layout('layouts/main')%>

<!DOCTYPE html>
<html>
<head>
    <title>MADPARK-Mapa</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.2/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />

    <style>
        #map { 
            width: 100%;
            height: 480px;
            box-shadow: 5px 5px 5px #888;
            margin-top: 200px; 
        }

        .filtro-container {
            position: absolute;
            top: 120px;
            left: 115px;
            z-index: 1000;
            background-color: #9db9cf;
            border-radius: 5px;
            padding: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            overflow: hidden;
            transition: max-height 0.3s ease-in-out;
        }

        .filtro-container.open {
            max-height: 600px; /* Ajusta la altura según sea necesario */
        }

        .filtro-container button {
            background-color: #284c61ef;
            color: #fff;
            border: none;
            padding: 15px 15px;
            border-radius: 3px;
            cursor: pointer;
        }

        .filtro-container button:hover {
            background-color: #87CEFA;
        }

        .search-button:hover {
            background-color: #d3a2d8;
        }

        #clearMarkers {
            position: absolute;
            top: 90px;
            right: 20px;
            z-index: 1000;
            background-color: #b4aeb4;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(99, 98, 98, 0.1);
        }

        #clearMarkers:hover {
            background-color: #d3a2d8;
        }
    </style>
</head>
<body>

    <div id="map" class="map"></div>

    <!-- Leaflet JS CDN -->
    <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet-src.js"></script>
       <!-- esri Leaflet JS from CDN -->
    <script src="https://unpkg.com/esri-leaflet@2.0.8/dist/esri-leaflet-debug.js"></script>


    <!-- Leaflet Routing Machine JS -->
    <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
     <!-- Leaflet Control Geocoder JS -->
     <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
<!--  esri Leaflet Control Geocoder JS -->
     <script src="https://unpkg.com/esri-leaflet-geocoder@2.2.4/dist/esri-leaflet-geocoder-debug.js"></script>
     <script src="https://unpkg.com/esri-leaflet-geocoder@2.2.4/dist/esri-leaflet-geocoder.css"></script>
    
    

    <script>
        var map = L.map('map').setView([40.416775, -3.70379], 11); // Centrar en Madrid

        L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://cloudmade.com">CloudMade</a>',
            maxZoom: 18
        }).addTo(map);

        var searchControl = L.esri.Geocoding.geosearch().addTo(map);
        var results = L.layerGroup().addTo(map);
    
        searchControl.on('results', function(data) {
            results.clearLayers();
            for (var i = data.results.length - 1; i >= 0; i--) {
                results.addLayer(L.marker(data.results[i].latlng));
            }
        });
    </script>
   
    
<script>
</script>
  

    <% if (isAuthenticated) { %>
        <script>
            var userCoordinates = null;
    navigator.geolocation.getCurrentPosition(function(position) {
        userCoordinates = [position.coords.latitude, position.coords.longitude];
        
        var userIcon = L.icon({
            iconUrl: 'https://raw.githubusercontent.com/ChristiMerce/Madpark_PAGT/main/src/views/layouts/images/pingUsuario.png',
            iconSize: [38, 38],
            iconAnchor: [19, 38],
            popupAnchor: [0, -38]
        });
        
        var userMarker = L.marker(userCoordinates, { icon: userIcon }).addTo(map);
        userMarker.bindPopup("Tu ubicación").openPopup();
    });
</script>
    <% } else { %>
        <script>
    alert("Para ver su ubicación debe registrarse o iniciar sesión");
        </script>
    <% } %>
        <!----->


        <script>


     // <---------------------------------------------->
    // Obtener los parkings desde el servidor
    fetch('/parkings')
    .then(response => response.json())
    .then(parkings => {
        parkings.forEach(parking => {
            const popupContent = `
                <h2>${parking.NOMBRE}</h2>
                <p>Distrito: ${parking.DISTRITO}</p>
                <p>Barrio: ${parking.BARRIO}</p>
            `;
            const marker = L.marker([parking.LATITUD, parking.LONGITUD]).addTo(map);
            marker.bindPopup(popupContent).openPopup();

            marker.on('click', (e) => {
                if (userCoordinates) {
                    if (!routingControl) {
                        calculateRoute(userCoordinates, [e.latlng.lat, e.latlng.lng]);
                    } else {
                        routingControl.setWaypoints([
                            L.latLng(userCoordinates[0], userCoordinates[1]), // Ubicación del usuario
                            L.latLng(e.latlng.lat, e.latlng.lng) // Parking seleccionado
                        ]);
                    }
                } else {
                    alert("Ubicación del usuario no disponible");
                }
            });
            marker.addTo(map);
        });
    })
    .catch(error => console.error('Error al obtener los parkings:', error));
    


          const options ={
                  draggable:true
            }       
    </script>
    
    
    <script>
        var routingControl;

        function calculateRoute(start, end) {
            if (!start) {
                alert("Ubicación del usuario no disponible");
                return;
            }
        
            // Restablecer las coordenadas de la ruta existente si hay alguna
            limpiarRuta();
        
            // Calcular y mostrar la nueva ruta
            routingControl = L.Routing.control({
                waypoints: [
                    L.latLng(start[0], start[1]), // Ubicación del usuario
                    L.latLng(end[0], end[1]) // Parking seleccionado
                ],
                routeWhileDragging: true
            }).addTo(map);
        }
        
        function limpiarRuta() {
            console.log("Limpiando ruta...");
            if (routingControl) {
                console.log("routingControl existe, removiendo...");
                routingControl.removeFrom(map); // Usa removeFrom() para eliminar el control de enrutamiento
                routingControl = null; // Establece routingControl a null después de eliminarlo
                console.log("Ruta eliminada.");
            } else {
                console.log("No hay ruta que limpiar.");
            }
        }


    </script>


</body>
</html>
